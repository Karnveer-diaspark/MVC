//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HAPPY.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class happyEntities1 : DbContext
    {
        public happyEntities1()
            : base("name=happyEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ClaimDetail> ClaimDetails { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<PolicyDetail> PolicyDetails { get; set; }
        public virtual DbSet<PolicyDocument> PolicyDocuments { get; set; }
        public virtual DbSet<PolicyMaster> PolicyMasters { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Contactu> Contactus { get; set; }
        public virtual DbSet<newEnquiry> newEnquiries { get; set; }
    
        public virtual int spContactus(string fullName, string email, string phoneNo, string message)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spContactus", fullNameParameter, emailParameter, phoneNoParameter, messageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SelectCustomerIDList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SelectCustomerIDList");
        }
    
        public virtual ObjectResult<SelectCustomerList_Result> SelectCustomerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomerList_Result>("SelectCustomerList");
        }
    
        public virtual int spCustomerPolicyDetail(string sumAssured, Nullable<int> customerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> policyMasterID)
        {
            var sumAssuredParameter = sumAssured != null ?
                new ObjectParameter("SumAssured", sumAssured) :
                new ObjectParameter("SumAssured", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var policyMasterIDParameter = policyMasterID.HasValue ?
                new ObjectParameter("PolicyMasterID", policyMasterID) :
                new ObjectParameter("PolicyMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCustomerPolicyDetail", sumAssuredParameter, customerIDParameter, startDateParameter, endDateParameter, policyMasterIDParameter);
        }
    
        public virtual ObjectResult<spGetEnquiry_Result> spGetEnquiry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEnquiry_Result>("spGetEnquiry");
        }
    
        public virtual ObjectResult<spGetEnquiryCustomerList_Result> spGetEnquiryCustomerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEnquiryCustomerList_Result>("spGetEnquiryCustomerList");
        }
    
        public virtual ObjectResult<spGetEnquiryList_Result> spGetEnquiryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEnquiryList_Result>("spGetEnquiryList");
        }
    
        public virtual int spTransaction(string bankName, string chequeNumber, Nullable<System.DateTime> dateTimeStamp, Nullable<int> policyDetailID)
        {
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var dateTimeStampParameter = dateTimeStamp.HasValue ?
                new ObjectParameter("DateTimeStamp", dateTimeStamp) :
                new ObjectParameter("DateTimeStamp", typeof(System.DateTime));
    
            var policyDetailIDParameter = policyDetailID.HasValue ?
                new ObjectParameter("PolicyDetailID", policyDetailID) :
                new ObjectParameter("PolicyDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTransaction", bankNameParameter, chequeNumberParameter, dateTimeStampParameter, policyDetailIDParameter);
        }
    
        public virtual int spUpdateCustomer(Nullable<int> customerID, string name, string address, string email, string contactNo, string city, string state, Nullable<long> pIN, string street, Nullable<System.DateTime> dOB, Nullable<int> parentID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var pINParameter = pIN.HasValue ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(long));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCustomer", customerIDParameter, nameParameter, addressParameter, emailParameter, contactNoParameter, cityParameter, stateParameter, pINParameter, streetParameter, dOBParameter, parentIDParameter);
        }
    
        public virtual ObjectResult<spAdmin_Result> spAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAdmin_Result>("spAdmin");
        }
    
        public virtual int spcontactus1(string fullName, string email, string phoneNo, string message)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spcontactus1", fullNameParameter, emailParameter, phoneNoParameter, messageParameter);
        }
    
        public virtual int MasterInsertUpdateDelete(string firstname, string middlename, string lastname, string email, string contactNo, Nullable<int> policyMasterID)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("Middlename", middlename) :
                new ObjectParameter("Middlename", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var policyMasterIDParameter = policyMasterID.HasValue ?
                new ObjectParameter("PolicyMasterID", policyMasterID) :
                new ObjectParameter("PolicyMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterInsertUpdateDelete", firstnameParameter, middlenameParameter, lastnameParameter, emailParameter, contactNoParameter, policyMasterIDParameter);
        }
    
        public virtual ObjectResult<string> sp_approved(string customerID, string policyDetailID, string status, string password)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var policyDetailIDParameter = policyDetailID != null ?
                new ObjectParameter("PolicyDetailID", policyDetailID) :
                new ObjectParameter("PolicyDetailID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_approved", customerIDParameter, policyDetailIDParameter, statusParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spCheckLoginStatus_Result> spCheckLoginStatus(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckLoginStatus_Result>("spCheckLoginStatus", emailIdParameter, passwordParameter);
        }
    
        public virtual int spcontact(string fullName, string email, string phoneNumber, string message)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spcontact", fullNameParameter, emailParameter, phoneNumberParameter, messageParameter);
        }
    
        public virtual ObjectResult<spGETcontactus_Result> spGETcontactus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGETcontactus_Result>("spGETcontactus");
        }
    
        public virtual ObjectResult<Newenquerylist_Result> Newenquerylist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Newenquerylist_Result>("Newenquerylist");
        }
    
        public virtual ObjectResult<spGETadmin_Result> spGETadmin(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGETadmin_Result>("spGETadmin", idParameter);
        }
    
        public virtual ObjectResult<spGetEnquiryAgent_Result> spGetEnquiryAgent(Nullable<int> enquiryID)
        {
            var enquiryIDParameter = enquiryID.HasValue ?
                new ObjectParameter("EnquiryID", enquiryID) :
                new ObjectParameter("EnquiryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEnquiryAgent_Result>("spGetEnquiryAgent", enquiryIDParameter);
        }
    
        public virtual int spRegisterCustomer00(Nullable<int> customerID, string firstName, string middleName, string lastName, string address, string email, string contactNo, string city, string state, string pIN, string street, Nullable<System.DateTime> dOB, Nullable<int> policyMasterID, Nullable<int> policyDetailID, string sumAssured, string chequeNumber, string bankName, string aadharNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var policyMasterIDParameter = policyMasterID.HasValue ?
                new ObjectParameter("PolicyMasterID", policyMasterID) :
                new ObjectParameter("PolicyMasterID", typeof(int));
    
            var policyDetailIDParameter = policyDetailID.HasValue ?
                new ObjectParameter("PolicyDetailID", policyDetailID) :
                new ObjectParameter("PolicyDetailID", typeof(int));
    
            var sumAssuredParameter = sumAssured != null ?
                new ObjectParameter("SumAssured", sumAssured) :
                new ObjectParameter("SumAssured", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var aadharNoParameter = aadharNo != null ?
                new ObjectParameter("AadharNo", aadharNo) :
                new ObjectParameter("AadharNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegisterCustomer00", customerIDParameter, firstNameParameter, middleNameParameter, lastNameParameter, addressParameter, emailParameter, contactNoParameter, cityParameter, stateParameter, pINParameter, streetParameter, dOBParameter, policyMasterIDParameter, policyDetailIDParameter, sumAssuredParameter, chequeNumberParameter, bankNameParameter, aadharNoParameter);
        }
    }
}
